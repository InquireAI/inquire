// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ApiKey {
  key String @id @db.VarChar(500)
}

enum ConnectionType {
  WEB
  TELEGRAM
}

model Connection {
  connectionType   ConnectionType
  connectionUserId String
  userId           String?
  user             User?          @relation(fields: [userId], references: [id])
  inquiries        Inquiry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([connectionType, connectionUserId])
  @@index([userId])
}

enum InquiryStatus {
  REQUESTED
  COMPLETED
  FAILED
}

model Inquiry {
  id               String         @id @default(cuid())
  connectionType   ConnectionType
  connectionUserId String
  queryType        String
  query            String         @db.Text
  status           InquiryStatus  @default(COMPLETED)
  result           String?        @db.Text

  connection Connection @relation(fields: [connectionType, connectionUserId], references: [connectionType, connectionUserId])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([connectionType, connectionUserId])
}

model Persona {
  id                String @id
  name              String @unique
  prompt            String @db.Text
  description       String @db.VarChar(10000)
  specificationHash String
  config            String @db.Text

  createdAt DateTime @default(now())

  @@index([id])
  @@index([name])
}

enum RecurringPriceDataInterval {
  month
  year
  week
  day
}

model RecurringPriceData {
  id       String                     @id
  price    Price                      @relation(fields: [id], references: [id])
  interval RecurringPriceDataInterval

  @@index([id])
}

enum PriceType {
  one_time
  recurring
}

model Price {
  id         String    @id
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  type       PriceType
  unitAmount Int
  active     Boolean

  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  recurring        RecurringPriceData?
  SubscriptionItem SubscriptionItem[]

  @@index([productId])
}

model Product {
  id          String  @id
  name        String
  description String?
  prices      Price[]
  active      Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubscriptionItem {
  id             String       @id
  subscriptionId String
  priceId        String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  price          Price        @relation(fields: [priceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionId])
  @@index([priceId])
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum PaymentMethodType {
  acss_debit
  affirm
  afterpay_clearpay
  alipay
  au_becs_debit
  bacs_debit
  bancontact
  blik
  boleto
  card
  card_present
  customer_balance
  eps
  fpx
  giropay
  grabpay
  ideal
  interac_present
  klarna
  konbini
  link
  oxxo
  p24
  paynow
  pix
  promptpay
  sepa_debit
  sofort
  us_bank_account
  wechat_pay
}

model PaymentMethod {
  id           String            @id
  customerId   String?
  customer     Customer?         @relation(fields: [customerId], references: [id])
  type         PaymentMethodType
  card         Json?
  subscription Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([customerId])
}

model Subscription {
  id                     String             @id
  customerId             String
  customer               Customer           @relation(fields: [customerId], references: [id])
  currentPeriodStart     DateTime
  currentPeriodEnd       DateTime
  status                 SubscriptionStatus
  subscriptionItems      SubscriptionItem[]
  defaultPaymentMethodId String
  defaultPaymentMethod   PaymentMethod      @relation(fields: [defaultPaymentMethodId], references: [id])
  cancelAtPeriodEnd      Boolean
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  @@index([customerId])
  @@index([defaultPaymentMethodId])
}

model Customer {
  id               String            @id
  userId           String?           @unique
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptions    Subscription[]
  checkoutSessions CheckoutSession[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  paymentMethods PaymentMethod[]

  @@index([userId])
}

enum CheckoutSessionMode {
  payment
  setup
  subscription
}

enum CheckoutSessionStatus {
  open
  complete
  expired
}

model CheckoutSession {
  id         String                 @id
  mode       CheckoutSessionMode
  successUrl String
  cancelUrl  String?
  url        String                 @db.VarChar(500) // stripe checkout links are quite long
  customerId String
  customer   Customer               @relation(fields: [customerId], references: [id])
  status     CheckoutSessionStatus?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  customer      Customer?
  connections   Connection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Persistence {
  bot_data      Json?
  chat_data     Json?
  user_data     Json?
  callback_data Json?
  conversations Json?

  updatedAt DateTime @id @default(now()) @updatedAt
}
