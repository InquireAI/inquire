// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

model Subscription {
  id         String             @id
  customerId String
  customer   Customer           @relation(fields: [customerId], references: [id])
  status     SubscriptionStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
}

model Customer {
  id               String            @id
  userId           String?           @unique
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptions    Subscription[]
  checkoutSessions CheckoutSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum CheckoutSessionMode {
  PAYMENT
  SETUP
  SUBSCRIPTION
}

enum CheckoutSessionStatus {
  OPEN
  COMPLETE
  EXPIRED
}

model CheckoutSession {
  id         String                 @id
  mode       CheckoutSessionMode
  successUrl String
  cancelUrl  String
  url        String                 @db.VarChar(500) // stripe checkout links are quite long
  customerId String
  customer   Customer               @relation(fields: [customerId], references: [id])
  status     CheckoutSessionStatus?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  telegramId    String?
  accounts      Account[]
  sessions      Session[]
  customer      Customer?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
